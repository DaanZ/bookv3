{
    "meta": {
        "title": "97 Things Every Software Architect Should Know",
        "author": "Edited by Richard Monson-Haefel",
        "category": "Technology",
        "publisher": "O'Reilly Media",
        "pages": 222
    },
    "parts": [
        {
            "title": "Software Architect's Wisdom Overview",
            "body": "The <b style='color: forestgreen;'>preface</b> of \"97 Things Every Software Architect Should Know\" highlights the pivotal role software architects play by balancing <b style='color: forestgreen;'>business</b> and <b style='color: forestgreen;'>technology</b>. This book gathers insights from numerous <b style='color: forestgreen;'>expert architects</b>, aiming to guide both current and aspiring architects through their <b style='color: forestgreen;'>challenging profession</b>. Written collaboratively by multiple contributors, it mirrors an <b style='color: forestgreen;'>open-source</b> project with each nugget of advice being <b style='color: forestgreen;'>freely available online</b> under a <b style='color: forestgreen;'>Creative Commons</b> license. This structure ensures the book is a <b style='color: forestgreen;'>sustainable</b> collective <b style='color: forestgreen;'>knowledge-sharing</b> project that is both <b style='color: forestgreen;'>modular</b> and impactful."
        },
        {
            "title": "Complexity and Communication in Architecture",
            "body": "The passage discusses several important concepts in software architecture:\n\n<b style='color: forestgreen;'>Essential vs. Accidental Complexity:</b> <b style='color: forestgreen;'>Essential complexity</b> represents the inherent difficulty of a problem, while <b style='color: forestgreen;'>accidental complexity</b> arises from the solutions devised, often unnecessarily increasing difficulty. For example, the outdated air traffic control system adds extra layers of complexity beyond managing flight data, which itself is challenging. Architects should be cautious of frameworks and solutions that might introduce more <b style='color: forestgreen;'>accidental complexity</b> than they resolve.\n\n<b style='color: forestgreen;'>Communication and Leadership:</b> The role of a software architect involves clearer, concise communication and leadership skills to align team collaboration and project success. <b style='color: forestgreen;'>Standing up</b> during presentations communicates authority and facilitates effective interaction, maximizing influence during discussions. Overall, balance essential and accidental complexities carefully, and establish strong team dynamics for optimal project outcomes."
        },
        {
            "title": "Simplicity Trumps Generality in Architecture",
            "body": "In <b style='color: forestgreen;'>software architecture</b>, the temptation to design components with generic, broad capabilities without specific real-world examples often leads to <b style='color: forestgreen;'>complexity</b> and <b style='color: forestgreen;'>uselessness</b>. Designing with simplicity and <b style='color: forestgreen;'>concrete needs</b> in mind is often more effective, making it easier to adapt as specific requirements arise. Many <b style='color: forestgreen;'>architects</b> mistakenly prioritize <b style='color: forestgreen;'>generality</b> over simplicity, but understanding your specific context leads to <b style='color: forestgreen;'>well-designed, effective</b> solutions.\n\nGenerality without grounding in real-world applications results in <b style='color: forestgreen;'>unwieldy systems</b> full of cumbersome <b style='color: forestgreen;'>options</b>. Architects should focus on the <b style='color: forestgreen;'>essential</b>, reducing complexity through genuine understanding of <b style='color: forestgreen;'>specific</b>, <b style='color: forestgreen;'>useful features</b> rather than speculative generality. True value comes from addressing well-known needs, leading to <b style='color: forestgreen;'>solutions that are both useful and adaptable</b>."
        },
        {
            "title": "Architects Must Be Hands On",
            "body": "<b style='color: forestgreen;'>Architects</b> should interact directly with their <b style='color: forestgreen;'>team</b> from the start of a project, rather than issuing directives from a distance. Engaging <b style='color: forestgreen;'>hands-on</b> and discussing problems collaboratively without assigning blame leads to better <b style='color: forestgreen;'>solutions</b>. Even <b style='color: forestgreen;'>expert</b> architects should not isolate themselves but seek advice from well-connected peers to make <b style='color: forestgreen;'>pragmatic</b> decisions.\n\nA good architect knows at least one <b style='color: forestgreen;'>tool</b> in their trade deeply, like an <b style='color: forestgreen;'>IDE</b> for software architects, but should have basic <b style='color: forestgreen;'>knowledge</b> of all levels of necessary tools, from <b style='color: forestgreen;'>network</b> monitoring to complex <b style='color: forestgreen;'>modelling</b>. An impressive resume means little if an architect can't be <b style='color: forestgreen;'>hands-on</b> and earn team <b style='color: forestgreen;'>respect</b> through demonstrable <b style='color: forestgreen;'>skill</b> and involvement."
        },
        {
            "title": "Software Development Lessons from Civil Engineering",
            "body": "<b style='color: forestgreen;'>Software engineers</b> might often be compared to civil engineers who design <b style='color: forestgreen;'>skyscrapers</b> and <b style='color: forestgreen;'>roads</b>. While the <b style='color: forestgreen;'>construction process</b> in civil engineering ensures the building is stable from the ground up, similar lessons can be applied in deploying integrated software systems. Deploy components <b style='color: forestgreen;'>incrementally</b> to manage <b style='color: forestgreen;'>technical risks</b> effectively, allowing for better <b style='color: forestgreen;'>interfaces</b> and <b style='color: forestgreen;'>reusability</b> to unfold naturally.\n\nHowever, notions from traditional engineering can mislead in software. Unlike <b style='color: forestgreen;'>skyscrapers</b>, which aren't scalable post-construction, software systems can adapt and grow features. This <b style='color: forestgreen;'>flexibility</b> lets you release applications early, adding <b style='color: forestgreen;'>value</b> and iterating components independently. It blends well with incremental deployment, providing high <b style='color: forestgreen;'>commercial value</b> and enhancing <b style='color: forestgreen;'>architecture quality</b>."
        },
        {
            "title": "The Dual Nature of an Architect",
            "body": "<b style='color: forestgreen;'>Software architects</b> must act like <b style='color: forestgreen;'>Janus</b>, the Roman god who could look forward and backward. This ability is key for balancing <b style='color: forestgreen;'>past success</b> with <b style='color: forestgreen;'>future goals</b>. An architect bridges gaps by <b style='color: forestgreen;'>merging different ideas</b>, like creating designs that balance <b style='color: forestgreen;'>ease of access</b> with <b style='color: forestgreen;'>security</b>. It's important they have a <b style='color: forestgreen;'>broader perspective</b> and are excellent <b style='color: forestgreen;'>listeners and evaluators</b> to align <b style='color: forestgreen;'>management goals</b> with <b style='color: forestgreen;'>development realities</b>. Successful projects often depend on understanding team skills and utilizing both <b style='color: forestgreen;'>open-source and commercial software</b> for efficiency."
        },
        {
            "title": "Skeleton Strategy for Architecture",
            "body": "To effectively <b style='color: forestgreen;'>implement, verify, and evolve</b> an application architecture, consider starting with a \"<b style='color: forestgreen;'>walking skeleton</b>.\" This involves creating a minimal, end-to-end system that connects all main <b style='color: forestgreen;'>architectural components</b>. By starting with a <b style='color: forestgreen;'>working system</b> that tests all communication paths early, you build <b style='color: forestgreen;'>confidence</b> in your architectural direction.\n\nAfter establishing this skeleton, <b style='color: forestgreen;'>incrementally add functionality</b> to avoid errors and adapt quickly. This approach helps you discover potential <b style='color: forestgreen;'>issues early</b>, reducing costly changes later. Collaborating across <b style='color: forestgreen;'>multiple developers and teams</b>, especially in larger projects, underscores the importance of <b style='color: forestgreen;'>coordination</b> as different developers work at varying paces."
        },
        {
            "title": "Data's Central Role in Software Systems",
            "body": "Data is essential in most <b style='color: forestgreen;'>software systems</b>, affecting everything from <b style='color: forestgreen;'>upgrades</b> to <b style='color: forestgreen;'>algorithms</b>. Many foundational problems in architecture stem from <b style='color: forestgreen;'>data</b>. It's crucial to collect the <b style='color: forestgreen;'>right data</b> at the right time to handle functionalities effectively. Despite the complexity of <b style='color: forestgreen;'>functionality</b>, data remains the pivotal element in a system. Operational issues, like structural updates, can be arduous, but the real complexity lies in ensuring applications merely gather more and more <b style='color: forestgreen;'>data</b>.\n\nDesigning systems involves making sure they capture the <b style='color: forestgreen;'>right data</b> at the right time and then applying necessary transformations. The core challenge is to ensure there's already a mechanism to view or modify this <b style='color: forestgreen;'>data</b> or to plan for adding such capabilities if missing. Essentially, many architectural decisions about <b style='color: forestgreen;'>data</b> become decisions about the system's <b style='color: forestgreen;'>core operations</b>."
        },
        {
            "title": "Control Data During Deployments",
            "body": "<b style='color: forestgreen;'>Software architects</b> should <b style='color: forestgreen;'>understand</b> that <b style='color: forestgreen;'>data</b> management is as crucial as code management. While source code control and continuous integration are typically in place for handling build and deployment processes, <b style='color: forestgreen;'>schema</b> and <b style='color: forestgreen;'>data changes</b> need similar controls to avoid chaos. Without organized control, database updates often become disorganized, leading to anxious moments during deployment. An architecture needs to address this by devising a more controlled system for managing data changes in sync with code changes to ensure smoother deployments."
        },
        {
            "title": "Growing Software Systems",
            "body": "When it comes to software projects, bigger systems are more prone to fail. As an <b style='color: forestgreen;'>architect</b>, resist the temptation to design large complete systems upfront. Although it's tempting to build a <b style='color: forestgreen;'>grand design</b> that meets all <b style='color: forestgreen;'>requirements</b> and desired properties from the start, opt for a <b style='color: forestgreen;'>grand vision</b> instead. Begin with a small, working subset of the intended <b style='color: forestgreen;'>architecture</b> \u2013 the simplest thing that could possibly work. This smaller system can evolve over time, be more <b style='color: forestgreen;'>testable</b>, less <b style='color: forestgreen;'>fragile</b>, and cheaper to maintain.\n\nLetting a system grow naturally allows it to adapt to changing <b style='color: forestgreen;'>requirements</b> and situations and helps avoid incidental complexity and inertia of large designs. This approach <b style='color: forestgreen;'>teaches</b> you its strengths and weaknesses promptly. Such a system can also be more <b style='color: forestgreen;'>observable</b> and <b style='color: forestgreen;'>compliant</b> to its stakeholders, ensuring it meets their evolving needs. Ultimately, taking a <b style='color: forestgreen;'>modular</b> approach feels like relinquishing control but helps achieve more <b style='color: forestgreen;'>robust</b> and <b style='color: forestgreen;'>flexible</b> software systems."
        }
    ]
}